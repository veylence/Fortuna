
#ifndef MOVEGENERATOR_H_
#define MOVEGENERATOR_H_

#include <cstdint>

#include "Types.h"

namespace MoveGenerator {
// How many 1 bits in the occupancy mask of a rook on some square.
// Used to compute an index for magic bitboards.
const int MAGIC_NUMBER_SHIFTS_ROOK[] = {
    52, 53, 53, 53, 53, 53, 53, 52,
    53, 54, 54, 54, 54, 54, 54, 53,
    53, 54, 54, 54, 54, 54, 54, 53,
    53, 54, 54, 54, 54, 54, 54, 53,
    53, 54, 54, 54, 54, 54, 54, 53,
    53, 54, 54, 54, 54, 54, 54, 53,
    53, 54, 54, 54, 54, 54, 54, 53,
    52, 53, 53, 53, 53, 53, 53, 52
};

// How many 1 bits in the occupancy mask of a bishop on some square.
// Used to compute an index for magic bitboards.
const int MAGIC_NUMBER_SHIFTS_BISHOP[] = {
    58, 59, 59, 59, 59, 59, 59, 58,
    59, 59, 59, 59, 59, 59, 59, 59,
    59, 59, 57, 57, 57, 57, 59, 59,
    59, 59, 57, 55, 55, 57, 59, 59,
    59, 59, 57, 55, 55, 57, 59, 59,
    59, 59, 57, 57, 57, 57, 59, 59,
    59, 59, 59, 59, 59, 59, 59, 59,
    58, 59, 59, 59, 59, 59, 59, 58
};

// Rook occupancy masks for each square
const U64 OCCUPANCY_MASKS_ROOK[] = {
    0x101010101017eULL,    0x202020202027cULL,    0x404040404047aULL,    0x8080808080876ULL,
    0x1010101010106eULL,   0x2020202020205eULL,   0x4040404040403eULL,   0x8080808080807eULL,
    0x1010101017e00ULL,    0x2020202027c00ULL,    0x4040404047a00ULL,    0x8080808087600ULL,
    0x10101010106e00ULL,   0x20202020205e00ULL,   0x40404040403e00ULL,   0x80808080807e00ULL,
    0x10101017e0100ULL,    0x20202027c0200ULL,    0x40404047a0400ULL,    0x8080808760800ULL,
    0x101010106e1000ULL,   0x202020205e2000ULL,   0x404040403e4000ULL,   0x808080807e8000ULL,
    0x101017e010100ULL,    0x202027c020200ULL,    0x404047a040400ULL,    0x8080876080800ULL,
    0x1010106e101000ULL,   0x2020205e202000ULL,   0x4040403e404000ULL,   0x8080807e808000ULL,
    0x1017e01010100ULL,    0x2027c02020200ULL,    0x4047a04040400ULL,    0x8087608080800ULL,
    0x10106e10101000ULL,   0x20205e20202000ULL,   0x40403e40404000ULL,   0x80807e80808000ULL,
    0x17e0101010100ULL,    0x27c0202020200ULL,    0x47a0404040400ULL,    0x8760808080800ULL,
    0x106e1010101000ULL,   0x205e2020202000ULL,   0x403e4040404000ULL,   0x807e8080808000ULL,
    0x7e010101010100ULL,   0x7c020202020200ULL,   0x7a040404040400ULL,   0x76080808080800ULL,
    0x6e101010101000ULL,   0x5e202020202000ULL,   0x3e404040404000ULL,   0x7e808080808000ULL,
    0x7e01010101010100ULL, 0x7c02020202020200ULL, 0x7a04040404040400ULL, 0x7608080808080800ULL,
    0x6e10101010101000ULL, 0x5e20202020202000ULL, 0x3e40404040404000ULL, 0x7e80808080808000ULL
};

// Bishop occupancy masks for each square
const U64 OCCUPANCY_MASKS_BISHOP[] = {
    0x40201008040200ULL, 0x402010080400ULL,   0x4020100a00ULL,     0x40221400ULL,
    0x2442800ULL,        0x204085000ULL,      0x20408102000ULL,    0x2040810204000ULL,
    0x20100804020000ULL, 0x40201008040000ULL, 0x4020100a0000ULL,   0x4022140000ULL,
    0x244280000ULL,      0x20408500000ULL,    0x2040810200000ULL,  0x4081020400000ULL,
    0x10080402000200ULL, 0x20100804000400ULL, 0x4020100a000a00ULL, 0x402214001400ULL,
    0x24428002800ULL,    0x2040850005000ULL,  0x4081020002000ULL,  0x8102040004000ULL,
    0x8040200020400ULL,  0x10080400040800ULL, 0x20100a000a1000ULL, 0x40221400142200ULL,
    0x2442800284400ULL,  0x4085000500800ULL,  0x8102000201000ULL,  0x10204000402000ULL,
    0x4020002040800ULL,  0x8040004081000ULL,  0x100a000a102000ULL, 0x22140014224000ULL,
    0x44280028440200ULL, 0x8500050080400ULL,  0x10200020100800ULL, 0x20400040201000ULL,
    0x2000204081000ULL,  0x4000408102000ULL,  0xa000a10204000ULL,  0x14001422400000ULL,
    0x28002844020000ULL, 0x50005008040200ULL, 0x20002010080400ULL, 0x40004020100800ULL,
    0x20408102000ULL,    0x40810204000ULL,    0xa1020400000ULL,    0x142240000000ULL,
    0x284402000000ULL,   0x500804020000ULL,   0x201008040200ULL,   0x402010080400ULL,
    0x2040810204000ULL,  0x4081020400000ULL,  0xa102040000000ULL,  0x14224000000000ULL,
    0x28440200000000ULL, 0x50080402000000ULL, 0x20100804020000ULL, 0x40201008040200ULL
};

// Magic numbers for each square for rooks.
// Used to compute an index for magic bitboards.
const U64 MAGIC_NUMBERS_ROOK[] = {
    0x80081020400080ULL,
    0x40001000402000ULL,
    0x200104008802201ULL,
    0x80080004801000ULL,
    0x80060401080080ULL,
    0x2100010024000208ULL,
    0x480210008804200ULL,
    0x480002041000280ULL,
    0x5080800040002a80ULL,
    0x400400020100040ULL,
    0x806000803000ULL,
    0x800800100280ULL,
    0x10804c00800800ULL,
    0x200800200800400ULL,
    0x81000100044200ULL,
    0x40802080104100ULL,
    0x204808014400021ULL,
    0x8040012010002801ULL,
    0x10002008040020ULL,
    0x8003010009241000ULL,
    0x5104828004003800ULL,
    0x8000808004008200ULL,
    0x3000010100020004ULL,
    0x4020001008044ULL,
    0x80080288000c000ULL,
    0x200040100040ULL,
    0x2010001080200088ULL,
    0x100100210008ULL,
    0x1040080080080ULL,
    0x80040080020080ULL,
    0x1010100400020148ULL,
    0x40c200208114ULL,
    0x4040004020800183ULL,
    0x10004000402001ULL,
    0x2090080400202000ULL,
    0x10008008080100ULL,
    0x40080080801400ULL,
    0x402000401010008ULL,
    0x100804000601ULL,
    0x210800140800100ULL,
    0x4000400082208000ULL,
    0x10002000504000ULL,
    0x1201100020008080ULL,
    0x200100008008080ULL,
    0x1041001108010004ULL,
    0x2000a0004008080ULL,
    0x2001108020024ULL,
    0x10080c2000cULL,
    0x6000400080182080ULL,
    0x30400020008880ULL,
    0x100080200080ULL,
    0x2081801000080080ULL,
    0x910800050100ULL,
    0x8a02800401020080ULL,
    0x20010810020400ULL,
    0x800841000080ULL,
    0x20208000114101ULL,
    0x210080104003ULL,
    0x1000104020010009ULL,
    0x1000410002009ULL,
    0x2000810042006ULL,
    0x1000204000801ULL,
    0x100000a210090804ULL,
    0x802101841442ULL
};

// Magic numbers for each square for bishops.
// Used to compute an index for magic bitboards.
const U64 MAGIC_NUMBERS_BISHOPS[] = {
    0x2100202040020ULL,
    0x4010040104002001ULL,
    0x4010401000002ULL,
    0x94040080000000ULL,
    0x201104000000000ULL,
    0x1012010000000ULL,
    0x40441420080a40ULL,
    0x42410410010400ULL,
    0x100208010400ULL,
    0x81840808200ULL,
    0x100102012800ULL,
    0x8000044041800000ULL,
    0x2340420200000ULL,
    0x10108400000ULL,
    0x80110082104000ULL,
    0x200002108061000ULL,
    0x10004002080100ULL,
    0x20008421020a00ULL,
    0x8000180810200ULL,
    0x4800018200c000ULL,
    0x1000090400000ULL,
    0x4600202100200ULL,
    0x2000401010802ULL,
    0x408304020100ULL,
    0x82080400c0100ULL,
    0x5100004100200ULL,
    0x48000c002400ULL,
    0x1080005004100ULL,
    0x901000010c000ULL,
    0x1010002100290ULL,
    0x1040820440400ULL,
    0x10200004200a0ULL,
    0x104440440222000ULL,
    0x1880820200200ULL,
    0x805000090400ULL,
    0x20080080080ULL,
    0x28002400004100ULL,
    0x144101080004808ULL,
    0x800c100240100ULL,
    0x20c20040020100ULL,
    0x808020804002009ULL,
    0x1840120004800ULL,
    0x2020024000200ULL,
    0x6011000800ULL,
    0x400080101100400ULL,
    0x6200401000020ULL,
    0x20010102000110ULL,
    0x8028102000840ULL,
    0x401041004040204ULL,
    0x2010088040020ULL,
    0x42402080000ULL,
    0x1000000084040000ULL,
    0x1002088040ULL,
    0x4041002020000ULL,
    0x440080204004000ULL,
    0x1010100200404800ULL,
    0x1440401011018ULL,
    0x8244100408ULL,
    0x100000022011000ULL,
    0x420208ULL,
    0x800008102400ULL,
    0x802080200ULL,
    0x8000102002040048ULL,
    0x20040408002020ULL
};
}

#endif /* MOVEGENERATOR_H_ */
